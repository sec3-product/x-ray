{
  "logger": {
    "level": "debug",
    "logFolder": "logs",
    "maximumLogFileCount": 8,
    "maximumLogFileSize": 128,
    "toStderr": false
  },
  "report": {
    "enableTerminal": true,
    "//ouputDir": "please remove // and set the right path here"
  },
  "solana": {
    "on": true,
    "account": {
      "UncheckedAccount": true
    },
    "sve": {
      "1001": {
        "name": "MissingSignerCheck",
        "description": "The account is missing signer check",
        "url": "https://github.com/project-serum/sealevel-attacks/tree/master/programs/0-signer-authorization"
      },
      "1002": {
        "name": "MissingOwnerCheck",
        "description": "The account is missing owner check",
        "url": "https://github.com/project-serum/sealevel-attacks/tree/master/programs/2-owner-checks"
      },
      "1003": {
        "name": "IntegerAddOverflow",
        "description": "The add operation may result in overflows",
        "url": "https://www.sec3.dev/blog/understanding-arithmetic-overflow-underflows-in-rust-and-solana-smart-contracts"
      },
      "1004": {
        "name": "IntegerUnderflow",
        "description": "The sub operation may result in underflows",
        "url": "https://www.sec3.dev/blog/understanding-arithmetic-overflow-underflows-in-rust-and-solana-smart-contracts"
      },
      "1005": {
        "name": "IntegerMulOverflow",
        "description": "The mul operation may result in overflows",
        "url": "https://www.sec3.dev/blog/understanding-arithmetic-overflow-underflows-in-rust-and-solana-smart-contracts"
      },
      "1006": {
        "name": "IntegerDivOverflow",
        "description": "The div operation may result in overflows",
        "url": "https://www.sec3.dev/blog/understanding-arithmetic-overflow-underflows-in-rust-and-solana-smart-contracts"
      },
      "1007": {
        "name": "UnverifiedParsedAccount",
        "description": "The account is not validated before parsing its data",
        "url": "https://github.com/project-serum/sealevel-attacks/tree/master/programs/1-account-data-matching"
      },
      "1008": {
        "name": "DuplicateMutableAccount",
        "description": "These two accounts are both mutable and may be the same account",
        "url": "https://github.com/project-serum/sealevel-attacks/tree/master/programs/6-duplicate-mutable-accounts"
      },
      "1009": {
        "name": "InsecureAccountClosing",
        "description": "The account may not be closed securely",
        "url": "https://github.com/project-serum/sealevel-attacks/tree/master/programs/9-closing-accounts"
      },
      "1010": {
        "name": "TypeFullCosplay",
        "description": "These two account data types are fully compatible and can be used to launch type confusion attacks",
        "url": "https://github.com/project-serum/sealevel-attacks/tree/master/programs/3-type-cosplay"
      },
      "1011": {
        "name": "TypePartialCosplay",
        "description": "These two account data types are partially compatible and may be exploited by type confusion attacks",
        "url": "https://github.com/project-serum/sealevel-attacks/tree/master/programs/3-type-cosplay"
      },
      "1012": {
        "name": "DivideByZero",
        "description": "The arithmetic operation may result in a divide-by-zero error",
        "url": "https://github.com/rust-lang/rust/issues/944"
      },
      "1014": {
        "name": "BumpSeedNotValidated",
        "description": "The account's bump seed is not validated and may be vulnerable to seed canonicalization attacks",
        "url": "https://github.com/project-serum/sealevel-attacks/tree/master/programs/7-bump-seed-canonicalization"
      },
      "1015": {
        "name": "InsecurePDASharing",
        "description": "The PDA sharing with these seeds may be insecure",
        "url": "https://github.com/project-serum/sealevel-attacks/tree/master/programs/8-pda-sharing"
      },
      "1017": {
        "name": "MaliciousSimulation",
        "description": "The program may contain malicious simulation",
        "url": "https://opcodes.fr/en/publications/2022-01/detecting-transaction-simulation/"
      },
      "1019": {
        "name": "UnvalidatedAccount",
        "description": "The account may not be properly validated and may be untrustful",
        "url": "https://medium.com/coinmonks/the-wormhole-hack-how-soteria-detects-the-vulnerability-automatically-eb0f433e8071"
      },
      "1030": {
        "name": "UnvalidatedPDAAccount",
        "description": "The PDA account may not be properly validated and may be untrustful",
        "url": "https://medium.com/coinmonks/the-wormhole-hack-how-soteria-detects-the-vulnerability-automatically-eb0f433e8071"
      },
      "1031": {
        "name": "UnvalidatedDestinationAccount",
        "description": "The account is used as destination in token transfer without validation and it could be the same as the transfer source account",
        "url": "https://www.sec3.dev/blog/how-to-audit-solana-smart-contracts-part-1-a-systematic-approach"
      },
      "1032": {
        "name": "IncorrectAuthorityAccount",
        "description": "The PDA account may be incorrectly used as shared authority and may allow any account to transfer or burn tokens",
        "url": "https://twitter.com/CharlieYouAI/status/1508842093514567687"
      },
      "1034": {
        "name": "InsecureSPLTokenCPI",
        "description": "The spl_token account may be arbitrary prior to version v3.1.1",
        "url": "https://github.com/project-serum/sealevel-attacks/tree/master/programs/5-arbitrary-cpi"
      },
      "1035": {
        "name": "InsecureAssociatedTokenAccount",
        "description": "The associated token account is missing PDA key check and may be faked",
        "url": "https://www.sec3.dev/blog/pda-bump-seeds"
      },
      "1036": {
        "name": "InsecureAccountRealloc",
        "description": "The account realloc in solana_program prior to v1.10.29 may cause programs to malfunction",
        "url": "https://twitter.com/jacobvcreech/status/1543968742606077952"
      },
      "1037": {
        "name": "PDASeedCollisions",
        "description": "These two PDA accounts may have the same seeds, which may lead to PDA collisions",
        "url": "https://docs.rs/anchor-lang/latest/anchor_lang/prelude/struct.Pubkey.html"
      },
      "2001": {
        "name": "IncorrectLoopBreakLogic",
        "description": "Loop break instead of continue (jet-v1 exploit)",
        "url": "https://twitter.com/JetProtocol/status/1476244740601524234"
      },
      "2002": {
        "name": "IncorrectConditionCheck",
        "description": "Liquidation condition >= should be >",
        "url": "https://www.sec3.dev/blog/how-to-audit-solana-smart-contracts-part-1-a-systematic-approach"
      },
      "2003": {
        "name": "ExponentialCalculation",
        "description": "The calculation has exponential complexity",
        "url": "https://www.sec3.dev/blog/how-to-audit-solana-smart-contracts-part-1-a-systematic-approach"
      },
      "2004": {
        "name": "IncorrectDivisionLogic",
        "description": "Incorrect checked_div instead of checked_ceil_div (spl-token-swap vulnerability: stable curve division)",
        "url": "https://github.com/solana-labs/solana-program-library/pull/2942"
      },
      "2005": {
        "name": "IncorrectTokenCalculation",
        "description": "The token amount calculation may be incorrect. Consider using the reserves instead of the balances.",
        "url": "https://medium.com/certora/exploiting-an-invariant-break-how-we-found-a-pool-draining-bug-in-sushiswaps-trident-585bd98a4d4f"
      },
      "20003": {
        "name": "DivisionPrecisionLoss",
        "description": "The division operation here may lose precision",
        "url": "https://www.zellic.io/blog/move-fast-and-break-things-pt-1"
      }
    }
  },
  "heapAllocFunctions": [
    "je_malloc",
    "je_calloc",
    "je_mallocx",
    "u_malloc",
    "u_calloc",
    "rm_malloc",
    "rm_calloc"
  ],
  "lockUnlockFunctions": {
    "malloc_mutex_lock": "malloc_mutex_unlock"
  }
}
