#!/usr/bin/env bash

# REQUIRES: preload
# RUN: bash %s %T/noisy_build
# RUN: cd %T/noisy_build; %{intercept-build} --cdb preload.json ./run.sh
# RUN: cd %T/noisy_build; %{cdb_diff} preload.json expected.json

set -o errexit
set -o nounset
set -o xtrace

# the test creates a subdirectory inside output dir.
#
# ${root_dir}
# â”œâ”€â”€ run.sh
# â”œâ”€â”€ expected.json
# â””â”€â”€ src
#    â””â”€â”€ empty.c

root_dir=$1
mkdir -p "${root_dir}/src"

touch "${root_dir}/src/empty.c"

build_file="${root_dir}/run.sh"
cat > ${build_file} << EOF
#!/usr/bin/env bash

set -o nounset
set -o xtrace

echo "hi there \"people\""
echo "hi	again"
echo "×ž×” ×©×œ×•×ž×š?"
echo "ÐšÐ°Ðº Ð´ÐµÐ»Ð°?"
echo "[1mThis line might cause an exception in json load[0m"

\$CC -c -Dver=1 src/empty.c &
\$CXX -c -Dver=2 src/empty.c &

bash -c "\
mkdir -p ./this/that; \
touch ./this/that; \
rm -rf ./this;"

wait

true;
EOF
chmod +x ${build_file}

cat > "${root_dir}/expected.json" << EOF
[
{
  "command": "cc -c -Dver=1 src/empty.c",
  "directory": "${root_dir}",
  "file": "src/empty.c"
}
,
{
  "command": "c++ -c -Dver=2 src/empty.c",
  "directory": "${root_dir}",
  "file": "src/empty.c"
}
]
EOF
