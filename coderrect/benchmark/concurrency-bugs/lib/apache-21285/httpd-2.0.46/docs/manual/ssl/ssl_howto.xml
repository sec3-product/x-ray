<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE manualpage SYSTEM "../style/manualpage.dtd">
<?xml-stylesheet type="text/xsl" href="../style/manual.en.xsl"?>
<manualpage metafile="ssl_howto.xml.meta">
<parentdocument href="./">SSL/TLS</parentdocument>

  <title>SSL/TLS Strong Encryption: How-To</title>

<summary>
<blockquote>
<p>The solution of this problem is trivial
and is left as an exercise for the reader.</p>

<p class="cite">-- <cite>Standard textbook cookie</cite></p>
</blockquote>

<p>How to solve particular security constraints for an SSL-aware
webserver is not always obvious because of the coherences between SSL,
HTTP and Apache's way of processing requests. This chapter gives
instructions on how to solve such typical situations. Treat is as a first
step to find out the final solution, but always try to understand the 
stuff before you use it. Nothing is worse than using a security solution
without knowing its restrictions and coherences.</p>
</summary>

<section id="ciphersuites">
<title>Cipher Suites and Enforced Strong Security</title>
<ul>
<li><a href="#realssl">SSLv2 only server</a></li>
<li><a href="#onlystrong">strong encryption only server</a></li>
<li><a href="#upgradeenc">server gated cryptography</a></li>
<li><a href="#strongurl">stronger per-directory requirements</a></li>
</ul>

<section id="realssl">
<title>How can I create a real SSLv2-only server?</title>
    <p>The following creates an SSL server which speaks only the SSLv2 protocol and
    its ciphers.</p>

    <example><title>httpd.conf</title>
      SSLProtocol -all +SSLv2<br />
      SSLCipherSuite SSLv2:+HIGH:+MEDIUM:+LOW:+EXP<br />
    </example>
</section>

<section id="onlystrong">
<title>How can I create an SSL server which accepts strong encryption
only?</title>
    <p>The following enables only the seven strongest ciphers:</p>
    <example><title>httpd.conf</title>
      SSLProtocol all<br />
      SSLCipherSuite HIGH:MEDIUM<br />
    </example>
</section>

<section id="upgradeenc">
<title>How can I create an SSL server which accepts strong encryption
only, but allows export browsers to upgrade to stronger encryption?</title>
    <p>This facility is called Server Gated Cryptography (SGC) and details
    you can find in the <code>README.GlobalID</code> document in the
    mod_ssl distribution. In short: The server has a Global ID server
    certificate, signed by a special CA certificate from Verisign which
    enables strong encryption in export browsers. This works as following:
    The browser connects with an export cipher, the server sends its Global
    ID certificate, the browser verifies it and subsequently upgrades the
    cipher suite before any HTTP communication takes place. The question
    now is: How can we allow this upgrade, but enforce strong encryption.
    Or in other words: Browser either have to initially connect with
    strong encryption or have to upgrade to strong encryption, but are
    not allowed to keep the export ciphers. The following does the trick:</p>
    <example><title>httpd.conf</title>
      # allow all ciphers for the initial handshake,<br />
      # so export browsers can upgrade via SGC facility<br />
      SSLCipherSuite ALL:!ADH:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL<br />
      <br />
      &lt;Directory /usr/local/apache2/htdocs&gt;<br />
      # but finally deny all browsers which haven't upgraded<br />
      SSLRequire %{SSL_CIPHER_USEKEYSIZE} &gt;= 128<br />
      &lt;/Directory&gt;
    </example>
</section>

<section id="strongurl">
<title>How can I create an SSL server which accepts all types of ciphers
in general, but requires a strong ciphers for access to a particular
URL?</title>
    <p>Obviously you cannot just use a server-wide <directive
    module="mod_ssl">SSLCipherSuite</directive> which restricts the
    ciphers to the strong variants. But mod_ssl allows you to reconfigure
    the cipher suite in per-directory context and automatically forces
    a renegotiation of the SSL parameters to meet the new configuration.
    So, the solution is:</p>
    <example>
      # be liberal in general<br />
      SSLCipherSuite ALL:!ADH:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL<br />
      <br />
      &lt;Location /strong/area&gt;<br />
      # but https://hostname/strong/area/ and below<br />
      # requires strong ciphers<br />
      SSLCipherSuite HIGH:MEDIUM<br />
      &lt;/Location&gt;
    </example>
</section>
</section>
<!-- /ciphersuites -->

<section id="accesscontrol">
<title>Client Authentication and Access Control</title>
<ul>
<li><a href="#allclients">simple certificate-based client authentication</a></li>
<li><a href="#arbitraryclients">selective certificate-based client authentication</a></li>
<li><a href="#certauthenticate">particular certificate-based client authentication</a></li>
<li><a href="#intranet">intranet vs. internet authentication</a></li>
</ul>

<section id="allclients">
<title>How can I authenticate clients based on certificates when I know
all my clients?</title>
    <p>When you know your user community (i.e. a closed user group
    situation), as it's the case for instance in an Intranet, you can
    use plain certificate authentication. All you have to do is to
    create client certificates signed by your own CA certificate
    <code>ca.crt</code> and then verify the clients against this
    certificate.</p>
    <example><title>httpd.conf</title>
      # require a client certificate which has to be directly<br />
      # signed by our CA certificate in ca.crt<br />
      SSLVerifyClient require<br />
      SSLVerifyDepth 1<br />
      SSLCACertificateFile conf/ssl.crt/ca.crt
    </example>
</section>

<section id="arbitraryclients">
<title>How can I authenticate my clients for a particular URL based on
certificates but still allow arbitrary clients to access the remaining
parts of the server?</title>
    <p>For this we again use the per-directory reconfiguration feature
    of <module>mod_ssl</module>:</p>

    <example><title>httpd.conf</title>
    SSLVerifyClient none<br />
    SSLCACertificateFile conf/ssl.crt/ca.crt<br />
    <br />
    &lt;Location /secure/area&gt;<br />
    SSLVerifyClient require<br />
    SSLVerifyDepth 1<br />
    &lt;/Location&gt;<br />
    </example>
</section>

<section id="certauthenticate">
<title>How can I authenticate only particular clients for a some URLs based
on certificates but still allow arbitrary clients to access the remaining
parts of the server?</title>
    <p>The key is to check for various ingredients of the client certificate.
    Usually this means to check the whole or part of the Distinguished
    Name (DN) of the Subject. For this two methods exists: The <module
    >mod_auth</module> based variant and the <directive
    module="mod_ssl">SSLRequire</directive> variant. The first method is
    good when the clients are of totally different type, i.e. when their
    DNs have no common fields (usually the organisation, etc.). In this
    case you've to establish a password database containing <em>all</em>
    clients. The second method is better when your clients are all part of
    a common hierarchy which is encoded into the DN. Then you can match
    them more easily.</p>

    <p>The first method:</p>
    <example><title>httpd.conf</title><pre>
SSLVerifyClient      none
&lt;Directory /usr/local/apache2/htdocs/secure/area&gt;

SSLVerifyClient      require
SSLVerifyDepth       5
SSLCACertificateFile conf/ssl.crt/ca.crt
SSLCACertificatePath conf/ssl.crt
SSLOptions           +FakeBasicAuth
SSLRequireSSL
AuthName             "Snake Oil Authentication"
AuthType             Basic
AuthBasicProvider    file
AuthUserFile         /usr/local/apache2/conf/httpd.passwd
require              valid-user
&lt;/Directory&gt;</pre>
    </example>

    <example><title>httpd.passwd</title><pre>
/C=DE/L=Munich/O=Snake Oil, Ltd./OU=Staff/CN=Foo:xxj31ZMTZzkVA
/C=US/L=S.F./O=Snake Oil, Ltd./OU=CA/CN=Bar:xxj31ZMTZzkVA
/C=US/L=L.A./O=Snake Oil, Ltd./OU=Dev/CN=Quux:xxj31ZMTZzkVA</pre>
    </example>

    <p>The second method:</p>

    <example><title>httpd.conf</title><pre>
SSLVerifyClient      none
&lt;Directory /usr/local/apache2/htdocs/secure/area&gt;

  SSLVerifyClient      require
  SSLVerifyDepth       5
  SSLCACertificateFile conf/ssl.crt/ca.crt
  SSLCACertificatePath conf/ssl.crt
  SSLOptions           +FakeBasicAuth
  SSLRequireSSL
  SSLRequire       %{SSL_CLIENT_S_DN_O}  eq "Snake Oil, Ltd." \
               and %{SSL_CLIENT_S_DN_OU} in {"Staff", "CA", "Dev"}
&lt;/Directory&gt;</pre>
    </example>
</section>

<section id="intranet">
<title>How can I require HTTPS with strong ciphers and either basic
authentication or client certificates for access to a subarea on the
Intranet website for clients coming from the Internet but still allow
plain HTTP access for clients on the Intranet?</title>
   <p>Let us assume the Intranet can be distinguished through the IP
   network 192.160.1.0/24 and the subarea on the Intranet website has
   the URL <code>/subarea</code>. Then configure the following outside
   your HTTPS virtual host (so it applies to both HTTPS and HTTP):</p>

    <example><title>httpd.conf</title><pre>
SSLCACertificateFile conf/ssl.crt/company-ca.crt

&lt;Directory /usr/local/apache2/htdocs&gt;
#   Outside the subarea only Intranet access is granted
Order                deny,allow
Deny                 from all
Allow                from 192.168.1.0/24
&lt;/Directory&gt;

&lt;Directory /usr/local/apache2/htdocs/subarea&gt;
#   Inside the subarea any Intranet access is allowed
#   but from the Internet only HTTPS + Strong-Cipher + Password
#   or the alternative HTTPS + Strong-Cipher + Client-Certificate

#   If HTTPS is used, make sure a strong cipher is used.
#   Additionally allow client certs as alternative to basic auth.
SSLVerifyClient      optional
SSLVerifyDepth       1
SSLOptions           +FakeBasicAuth +StrictRequire
SSLRequire           %{SSL_CIPHER_USEKEYSIZE} &gt;= 128

#   Force clients from the Internet to use HTTPS
RewriteEngine        on
RewriteCond          %{REMOTE_ADDR} !^192\.168\.1\.[0-9]+$
RewriteCond          %{HTTPS} !=on
RewriteRule          .* - [F]

#   Allow Network Access and/or Basic Auth
Satisfy              any

#   Network Access Control
Order                deny,allow
Deny                 from all
Allow                192.168.1.0/24

#   HTTP Basic Authentication
AuthType             basic
AuthName             "Protected Intranet Area"
AuthBasicProvider    file
AuthUserFile         conf/protected.passwd
Require              valid-user
&lt;/Directory&gt;</pre>
    </example>
</section>
</section>
<!-- /access control -->

</manualpage>



