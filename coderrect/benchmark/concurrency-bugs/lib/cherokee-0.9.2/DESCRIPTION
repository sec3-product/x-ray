
+--------------------+
|                    |
| SUMMARY            |
|                    |
+--------------------+

A concurrency bug in Cherokee-0.9.2

This is a data race and also an atomicity violation bug.

+---------------------------------------------------------+
|                                                         |
| DETAILS                                                 |
|                                                         |
+---------------------------------------------------------+

Cherokee is a light-weight, hign-performance and open-source
Cross-platform Web server.

A concurrency bug illustrated in this case, originally 
reported by Cherokee users. Its buggy manifestation is 
log corruption, similar to that of the Apache bug #25520.

In Cherokee, It uses the read-write lock in "cherokee_bogotime
_try_update" function to improve the performance. But in 
the critical section "cherokee_buffer_add",  a thread's 
read-write sequence may falsely mingle with another thread's
read or write operaton to the same shared variable, leading
to program's log corruption.

cherokee_bogotime_try_update (void) {
  ...
  unlocked = CHEROKEE_RWLOCK_TRYREADER (&lock);
  ...
  ret = update_guts();
  CHEROKEE_RWLOCK_UNLOCK (&lock); 
  ...
}

update_guts (void) {
  ...
  cherokee_buffer_clean (&cherokee_bogonow_strgmt);
  ...
  cherokee_buffer_add(&cherokee_bogonow_strgmt,bufstr,szlen);
}

cherokee_buffer_add (...) {
  ...
  memcpy (buf->buf+buf->len, txt, size);
  buf->len += size;
  buf->buf[buf->len] = '\0';
  return ret_ok;
}

As codes shown as above, In the "cherokee_buffer_add" function, 
buf->len is the index to the end of the log buffer. In this 
fuction, it is read, write, and then used to help append the
log buffer, after the buffer update (memcpy, the buf->len is
increased. Howerver, the whole process is not protected by lock.

Therefore, the Cherokee log(buf->buf) is corrupted whenever the 
buffer index buf->len is modified between "memcpy(buf->len, size)"
and "buf->len += size".


The buggy interleaving could be:

Thread 1                         Thread 2

cherokee_buffer_add(...) {       cherokee_buffer_add(...) {
  ...                              ... 
  memcpy(buf->buf + buf->len,      memcpy(buf->buf + buf->len,
         txt, size);                      txt, size);


                                   buf->len += size;
                                   buf->buf[buf->len] = '\0';

  buf->len += size;
  buf->buf[buf->len] = '\0';
}                                }



