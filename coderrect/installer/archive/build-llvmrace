#!/usr/bin/perl


use strict;
use warnings;
use Cwd qw(cwd);
use Getopt::Std;

my $CLANG_DOWNLOAD_LINK = 'https://public-installer-pkg.s3.us-east-2.amazonaws.com/custom_clang_10.tar.gz';


sub packageRaceDetect {
  my ($releaseBuild, $pkgVersion, $develop, $branch) = (@_);

  print "Building racedetect ...\n";

  `cd build && git clone ssh://git\@github.com/coderrect/LLVMRace.git`;
  if ($? != 0) {
    print STDERR "Failed to clone LLVMRace\n";
    exit 1;
  }
  if ($releaseBuild) {
    system("cd build/LLVMRace && git checkout release-v$pkgVersion");
  }
  elsif ($branch) {
    system("cd build/LLVMRace && git checkout $pkgVersion");
  }
  elsif ($develop) {
    system("cd build/LLVMRace && git checkout develop");
  }
  else {
    system("cd build/LLVMRace && git checkout tags/v$pkgVersion"); 
  }
  my $rc = $? >> 8;
  if ($rc != 0) {
    print STDERR "No right tag or release brnach, quit\n";
    exit 1;
  }

  $rc = system("cd build/LLVMRace && git submodule init && git submodule update");
  if ($rc != 0) {
    print STDERR "Unable to get z3 source code\n";
    exit 1;
  }

#
# build clang-10.0.0 if it doesn't exist
#
  if (! -d "build/llvm10/clang-10.0.0") {
    print "Building clang 10.0.0 ...\n";
    `./build-custom-clang10.pl -k`;
  }

#
# build aser-race with the installer docker
#
  `docker run --rm --user=\$(id -u):\$(id -g) -v \$(pwd)/build:/build -v \$(pwd)/dockerstuff/scripts:/scripts coderrect/installer:1.1 /scripts/build-llvmrace.sh`;
  if ($? != 0) {
    system("cat \$(pwd)/build/LLVMRace/build/unittest.log");
    print STDERR "Failed to build LLVMRace.\n";
    exit 1;
  }
}


#
# main
#
my %opt;
getopts('hrdb', \%opt);
my ($help, $release, $develop, $branch) = @opt{ qw(h r d b) };
my $pkgVersion = shift;

if ($help) {
    print <<EOF
build-pkg - build a installer from the master branch or the release branch

Usage:
  build-llvmrace [options] version

  -h - print this message
  -r - build from the release branches (the default is from master branch)
  -d - build from the develop branches
  -b - build from a specific branch

Examples:
  1. build the package v0.0.1 from master branches
  \$ build-llvmrace 0.0.1

  2. build the package v0.0.1 from release branches
  \$ build-llvmrace -r 0.0.1

  3. build the package from the develop branch
  \$ build-llvmrace -d

  4. build the package from 'jeff' branch
  \$ build-llvmrace -b jeff
EOF
;
    exit 0;
}


# clean the battlefield
#
if (! -d "build") {
    `mkdir build`;
}
`cd build && rm -fr LLVMRace package`;

# copy the package scaffold to build
#
`cp -r package build/.`;
if ($? != 0) {
    print STDERR "Failed to copy the package template\n";
    exit 1;
}

if (! -d "build/package/bin") {
    `mkdir -p build/package/bin`;
}
if (! -d "build/package/logs") {
    `mkdir -p build/package/logs`;
}
if (! -d "build/package/clang") {
    `mkdir -p build/package/clang`;
}
if (! -d "build/package/data") {
    `mkdir -p build/package/data`;
}
if (! -d "build/package/examples") {
    `mkdir -p build/package/examples`;
}

packageRaceDetect($release, $pkgVersion, $develop, $branch);


__END__
