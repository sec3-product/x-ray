LULESH:
    fetch: 'git clone -q https://github.com/LLNL/LULESH.git'
    build_dir: 'LULESH'
    build: 'make -j CXX=clang++ 
    CXXFLAGS="-g -fopenmp -O3 -march=native -I. -Wall -DUSE_MPI=0 -fsave-optimization-record -save-stats"
    LDFLAGS="-g -O3 -march=native -fopenmp"'
    clean : [ 'git reset --hard; git clean -fx' ]
    versions: ['2.0.3', 'a201764b']
Quicksilver:
    fetch: 'git clone -q https://github.com/LLNL/Quicksilver'
    build_dir: 'Quicksilver/src'
    build: 'make -j CXX=clang++ 
            CXXFLAGS="-g -fopenmp -O3 -march=native -I. -Wall
            -DHAVE_OPENMP -fsave-optimization-record -save-stats"
            LDFLAGS="-g -O3 -march=native -fopenmp"'
    clean : [ 'git reset --hard; git clean -fx' ]
    versions: ['V1.0']
# miniAMR:
#     fetch: 'git clone -q https://github.com/Mantevo/miniAMR'
#     build_dir: 'miniAMR/openmp'
#     build: 'make -j CC="OMPI_CC=clang MPICH_CC=clang mpicc" LD="OMPI_CC=clang MPICH_CC=clang mpicc"
#     CFLAGS="-O3 -march=native -fopenmp -fsave-optimization-record -save-stats"
#     LDLIBS="-lm -fopenmp"'
#     clean : [ 'git reset --hard; git clean -fx' ]
#     versions: [' v1.6.4', '0d60eaf2']
CovidSim:
    fetch: 'git clone https://github.com/mrc-ide/covid-sim.git'
    pre_build_dir: 'covid-sim'
    pre_build: 'mkdir -p build && cd build && cmake ..'
    build_dir: 'covid-sim/build'
    build: 'make -j'
    clean: 'make clean'
    versions: ['v0.14.0', 'v0.13.0', 'v0.12.0', 'v0.11.0', 'v0.10.0']
# Pennant:
#    fetch: 'git clone https://github.com/lanl/PENNANT.git'
#    build_dir: 'PENNANT'
#    #build: 'make -j CXX=clang++ CXXFLAGS="-fopenmp" CXXFLAGS_OPENMP=-fopenmp'
#    build: 'make -j'
#    clean: 'make clean'
#    versions: ['pennant_v0.9', 'pennant_v0.8', 'pennant_v0.7', 'pennant_v0.6']
Kripke:
    fetch: 'git clone -q https://github.com/LLNL/Kripke.git; cd Kripke; git submodule update --init --recursive'
    pre_build_dir: 'Kripke'
    pre_build: 'mkdir -p build && cd build && cmake -DENABLE_MPI=false -DENABLE_OPENMP=true ..'
    build_dir: 'Kripke/build'
    build: 'make -j'
    clean: 'git submodule update && make clean'
    versions: ['v1.2.4', 'v1.2.3']
XSBench:
    fetch: 'git clone https://github.com/ANL-CESAR/XSBench.git'
    build_dir: 'XSBench/openmp-threading'
    build: 'make -j CC="clang" OPENMP=yes CFLAGS="-fopenmp"'
    clean: 'make clean'
    versions: ['v19']
miniFE:
    fetch: 'git clone https://github.com/Mantevo/miniFE.git'
    build_dir: 'miniFE/openmp-opt/src'
    build: 'make -j CC=clang CXX=clang++ CFLAGS="$(mpicc --showme:compile) $(mpicc --showme:link)"'
    clean: 'make clean'
    versions:  ['2.2.0', 'v2.1.0', 'v2.0.0',]
CoMD:
    fetch: 'git clone https://github.com/ECP-copa/CoMD.git'
    pre_build_dir: 'CoMD/src-openmp'
    pre_build: 'cp Makefile.vanilla Makefile'
    build_dir: 'CoMD/src-openmp'
    build: 'make -j CC=clang CFLAGS="-fopenmp" DO_MPI=no'
    clean: 'make clean'
    versions: ['v1.1']
# dataracebench:
#     fetch: 'git clone https://github.com/LLNL/dataracebench.git'
#     build_dir: 'dataracebench'
#     build: './check-data-races.sh --run c'
#     clean : [ 'git reset --hard; git clean -fx' ]
#     versions: ['v1.3.2']
memcached:
    fetch: 'git clone https://github.com/memcached/memcached.git'
    pre_build_dir: 'memcached'
    pre_build: './autogen.sh && ./configure'
    build_dir: 'memcached'
    build: 'make -j'
    clean: './autogen.sh && ./configure && make clean'
    versions: ['1.6.8', '1.6.6', '1.6.3']
redis:
    fetch: 'git clone https://github.com/redis/redis.git'
    build_dir: 'redis'
    build: 'make -j'
    clean: 'make distclean'
    versions: ['6.0.9', '6.0.6', '6.0.0', '5.0.7']
TDengine:
    fetch: 'git clone https://github.com/taosdata/TDengine.git && git submodule update --init --recursive'
    pre_build_dir: 'TDengine'
    pre_build: 'mkdir -p build && cd build && cmake ..'
    build_dir: 'TDengine/build'
    build: 'make -j'
    clean: 'git submodule update && make clean'
    versions: ['ver-2.0.6.0', 'ver-2.0.4.0', 'ver-2.0.3.0']
ImageMagick:
    fetch: 'git clone https://github.com/ImageMagick/ImageMagick.git'
    build_dir: 'ImageMagick'
    build: 'make -j'
    clean: './configure && make clean'
    versions: ['7.0.10-35', '7.0.10-35']
pbzip2:
    fetch: 'git clone https://github.com/ruanhuabin/pbzip2.git'
    build_dir: 'pbzip2'
    build: 'make -j'
    clean: 'make clean'
    versions: ['92d65933']
Kratos:
    fetch: 'git clone https://github.com/KratosMultiphysics/Kratos.git'
    pre_build_dir: 'Kratos'
    pre_build: 'mkdir -p build && cd build && cmake ..'
    build_dir: 'Kratos/build'
    build: 'make -j'
    clean: 'make clean'
    versions: ['v8.0.1']
CloverLeaf_OpenMP:
    fetch: 'git clone https://github.com/UK-MAC/CloverLeaf_OpenMP.git'
    build_dir: 'CloverLeaf_OpenMP'
    build: 'make COMPILER=GNU MPI_COMPILER=gfortran C_MPI_COMPILER=gcc'
    clean: 'make clean'
    versions: ['v1.3']
