FROM ubuntu:22.04

COPY --from=llvm-prebuilt /llvm-project /llvm-project

# ARG CODERRECT_LOCAL_PATH=coderrect-linux-develop.tar.gz
# ARG CODERRECT_LOCAL_FILENAME=coderrect-linux-develop

# # install coderrect
# ADD ${CODERRECT_LOCAL_PATH} /opt
# ENV PATH="/opt/${CODERRECT_LOCAL_FILENAME}/bin:${PATH}"

# # for LLVM 12.0.1 image
# RUN apt-get update && apt-get install -y \
#     gnupg \
#     software-properties-common \
#     build-essential \
#     python3 \
#     python3-pip \
#     ninja-build \
#     zlib1g-dev \
#     libtinfo-dev \
#     libncurses5-dev

# # pre-compiled LLVM 12.0.1 (with MLIR)
# RUN wget https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.1/clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-16.04.tar.xz && \
#     tar -xf clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-16.04.tar.xz && \
#     mv clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu- /usr/local/llvm-12 && \
#     ln -s /usr/local/llvm-12/bin/llvm-config /usr/bin/llvm-config-12 && \
#     ln -s /usr/local/llvm-12/bin/clang /usr/bin/clang-12 && \
#     ln -s /usr/local/llvm-12/bin/clang++ /usr/bin/clang++-12 && \
#     ln -s /usr/local/llvm-12/bin/mlir* /usr/bin/

# # Verify the installations: LLVM
# RUN clang-12 --version
# RUN llvm-config-12 --version

ENV DEBIAN_FRONTEND=noninteractive

# Build tools and dependencies.
# Go: Pick up the latest stable (1.22 as of July 2024) via
# https://go.dev/wiki/Ubuntu#using-ppa.
RUN apt-get update \
    && apt-get install -y software-properties-common \
    && add-apt-repository ppa:longsleep/golang-backports \
    && apt-get update \
    && apt-get install -y \
    build-essential \
    clang \
    golang-go \
    wget \
    git \
    zlib1g-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Use prebuilt CMake binary release.
ARG CMAKE_VERSION=3.26.0
RUN wget --quiet https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-x86_64.sh \
    && mkdir /opt/cmake \
    && sh cmake-${CMAKE_VERSION}-linux-x86_64.sh --prefix=/opt/cmake --skip-license \
    && ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake \
    && rm cmake-${CMAKE_VERSION}-linux-x86_64.sh

COPY . x-ray-toolchain

# Caller can optionally specify # of threads.
ARG MAKE_THREADS=

# Build x-ray detector.
RUN mkdir -p x-ray-toolchain/code-detector/build \
    && cd x-ray-toolchain/code-detector/build \
    && cmake .. \
    && make -j${MAKE_THREADS}

# Build x-ray parser.
RUN mkdir -p x-ray-toolchain/code-parser/build \
    && cd x-ray-toolchain/code-parser/build \
    && cmake -DCMAKE_BUILD_TYPE=Release .. \
    && make -j${MAKE_THREADS}

# Set the working directory
WORKDIR /workspace

# Default command to start an interactive shell
CMD ["/bin/bash"]

